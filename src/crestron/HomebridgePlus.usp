/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Jonathan Avila
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

#SYMBOL_NAME "HomebridgePlus"
#HINT "This program communicates with a homebridge server via TCP to enable Crestron compatibility with Apple HomeKit."
#PRINT_TO_TRACE
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)

  Note:  Crestron does not recommend the use of the #INCLUDEPATH directive in SIMPL+ modules
  that are to be used in Crestron Studio.
*******************************************************************************************/

#USER_SIMPLSHARP_LIBRARY "SSharpHomebridge"


/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/

DIGITAL_INPUT EnableTcpServer;
DIGITAL_INPUT Debug;
DIGITAL_INPUT Light_IsOn[50];
DIGITAL_INPUT DimLight_IsOn[50];
DIGITAL_INPUT Switch_IsOn[50];
DIGITAL_INPUT Fan_IsHigh[10];
DIGITAL_INPUT Fan_IsMed[10];
DIGITAL_INPUT Fan_IsLow[10];
DIGITAL_INPUT Fan_IsOff[10];
DIGITAL_INPUT Tv_IsOn[10];

ANALOG_INPUT DimLight_Level[50];
ANALOG_INPUT Tv_SelectedSource[10];

DIGITAL_OUTPUT Light_On[50];
DIGITAL_OUTPUT Light_Off[50];
DIGITAL_OUTPUT DimLight_On[50];
DIGITAL_OUTPUT DimLight_Off[50];
DIGITAL_OUTPUT Switch_On[50];
DIGITAL_OUTPUT Switch_Off[50];
DIGITAL_OUTPUT Fan_High[10];
DIGITAL_OUTPUT Fan_Med[10];
DIGITAL_OUTPUT Fan_Low[10];
DIGITAL_OUTPUT Fan_Off[10];
DIGITAL_OUTPUT Tv_On[10];
DIGITAL_OUTPUT Tv_Off[10];
DIGITAL_OUTPUT Tv_SelectSource[20];

ANALOG_OUTPUT DimLight_Set[50];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/

INTEGER_PARAMETER TcpServerMaxConnections;
INTEGER_PARAMETER TcpServerBufferSize;
INTEGER_PARAMETER TcpServerPort;

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES TcpServerMaxConnections
	propValidUnits = unitDecimal;
	propBounds = 1d , 64d;
	propDefaultValue = 5d;
	propShortDescription = "max connections";
	#BEGIN_PROP_FULL_DESCRIPTION "TCP server max number of client connections allowed" #END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES TcpServerBufferSize
	propValidUnits = unitDecimal;
	propDefaultValue = 65000d;
	propShortDescription = "buffer size";
	#BEGIN_PROP_FULL_DESCRIPTION "TCP server buffer size" #END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES TcpServerPort
	propValidUnits = unitDecimal;
	propDefaultValue = 9050d;
	propShortDescription = "port";
	#BEGIN_PROP_FULL_DESCRIPTION "TCP server port to connect to" #END_PROP_FULL_DESCRIPTION
#END_PARAMETER_PROPERTIES

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/

MessageBroker MsgBroker;

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/

FUNCTION Noop(Message message)
{
	message.MessageType = "Response";
	MsgBroker.SendToHomebridge(message);
}

FUNCTION ProcessGetRequest(Message message)
{
	INTEGER Id;
	Id = message.DeviceId;
	message.MessageType = "Response";

	// Power Property
	if (message.DeviceType = "LightSwitch" && message.Property = "Power")
	{
		message.Value = Light_IsOn[Id];
	}
	else if (message.DeviceType = "LightDimmer" && message.Property = "Power")
	{
		message.Value = DimLight_IsOn[Id];
	}
	else if (message.DeviceType = "GenericSwitch" && message.Property = "Power")
	{
		message.Value = Switch_IsOn[Id];
	}
	else if (message.DeviceType = "Fan" && message.Property = "Power")
	{
		message.Value = !Fan_IsOff[Id];
	}
	else if (message.DeviceType = "Television" && message.Property = "Power")
	{
		message.Value = Tv_IsOn[Id];
	}
	// Level Property
	else if (message.DeviceType = "LightDimmer" && message.Property = "Level")
	{
		message.Value = DimLight_Level[Id];
	}
	// Speed Property
	else if (message.DeviceType = "Fan" && message.Property = "Speed")
	{
		if (Fan_IsLow[Id])
		{
			message.Value = 33;
		}
		else if (Fan_IsMed[Id])
		{
			message.Value = 67;
		}

		else
		{
			message.Value = 100;
		}
	}
    // Source Property
	else if (message.DeviceType = "Television" && message.Property = "Source")
	{
		message.Value = Tv_SelectedSource[Id];
	}
	else
	{
		Print("Unknown Get request for DeviceType: %s and Property: %s", message.DeviceType, message.Property);
	}

	// Send to Homebridge
	MsgBroker.SendToHomebridge(message);
}

FUNCTION ProcessSetRequest(Message message)
{
	INTEGER Id;
	Id = message.DeviceId;

	// Power Property
	if (message.DeviceType = "LightSwitch" && message.Property = "Power")
	{
		if (message.Value = 1 && !Light_IsOn[Id])
		{
			PULSE(1, Light_On[Id]);
		}
		else if (message.Value = 0 && Light_IsOn[Id])
		{
			PULSE(1, Light_Off[Id]);
		}
		else
		{
			Noop(message);
		}
	}
	else if (message.DeviceType = "LightDimmer" && message.Property = "Power")
	{
		if (message.Value = 1 && !DimLight_IsOn[Id])
		{
			PULSE(1, DimLight_On[Id]);
		}
		else if (message.Value = 0 && DimLight_IsOn[Id])
		{
			PULSE(1, DimLight_Off[Id]);
		}
		else
		{
			Noop(message);
		}
	}
	else if (message.DeviceType = "GenericSwitch" && message.Property = "Power")
	{
		if (message.Value = 1 && !Switch_IsOn[Id])
		{
			PULSE(1, Switch_On[Id]);
		}
		else if (message.Value = 0 && Switch_IsOn[Id])
		{
			PULSE(1, Switch_Off[Id]);
		}
		else
		{
			Noop(message);
		}
	}
	else if (message.DeviceType = "Fan" && message.Property = "Power")
	{
		if (message.Value = 1 && Fan_IsOff[Id])
		{
			PULSE(1, Fan_High[Id]);
		}
		else if (message.Value = 0 && !Fan_IsOff[Id])
		{
			PULSE(1, Fan_Off[Id]);
		}
		else
		{
			Noop(message);
		}
	}
	else if (message.DeviceType = "Television" && message.Property = "Power")
	{
		if (message.Value = 1 && !Tv_IsOn[Id])
		{
			PULSE(1, Tv_On[Id]);
		}
		else if (message.Value = 0 && Tv_IsOn[Id])
		{
			PULSE(1, Tv_Off[Id]);
		}
		else
		{
			Noop(message);
		}
	}
	// Level Property
	else if (message.DeviceType = "LightDimmer" && message.Property = "Level")
	{
		if (message.Value = 65535)
		{
			PULSE(1, DimLight_On[Id]);
		}
		else
		{
			DimLight_Set[Id] = message.Value;
		}
	}
	// Speed Property
	else if (message.DeviceType = "Fan" && message.Property = "Speed")
	{
		if (message.Value = 0 && !Fan_IsOff[Id]) {
			PULSE(1, Fan_Off[Id]);
		}
		else if (message.Value = 33 && !Fan_IsLow[Id])
		{
			PULSE(1, Fan_Low[Id]);
		}
		else if (message.Value = 67 && !Fan_IsMed[Id])
		{
			PULSE(1, Fan_Med[Id]);
		}
		else if (message.Value = 100 && !Fan_IsHigh[Id])
		{
			PULSE(1, Fan_High[Id]);
		}
		else
		{
			Noop(message);
		}
	}
	else
	{
		Print("Unknown Set request for DeviceType: %s and Property: %s", message.DeviceType, message.Property);
	}
}

FUNCTION ProcessCrestronEvent(INTEGER deviceId, STRING deviceType, STRING property, INTEGER value)
{
	Message message;
	message.DeviceId = deviceId;
	message.DeviceType = deviceType;
	message.MessageType = "Event";
	message.Operation = "Set";
	message.Property = property;
	message.Value = value;

	// Send to homebridge
	MsgBroker.SendToHomebridge(message);
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

EVENTHANDLER RequestHandler(MessageBroker sender, Message message)
{
	if (message.MessageType = "Request" && message.Operation = "Get")
	{
		ProcessGetRequest(message);
	}
	else
	{
		ProcessSetRequest(message);
    }
}

PUSH EnableTcpServer
{
	MsgBroker.StartTcpServer(TcpServerPort, TcpServerBufferSize, TcpServerMaxConnections);
}

RELEASE EnableTcpServer
{
	MsgBroker.StopTcpServer();
}

PUSH Debug
{
	MsgBroker.EnableDebug();
}

RELEASE Debug
{
	MsgBroker.DisableDebug();
}

CHANGE Light_IsOn
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	ProcessCrestronEvent(Id, "LightSwitch", "Power", Light_IsOn[Id]);
}

CHANGE DimLight_IsOn
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	ProcessCrestronEvent(Id, "LightDimmer", "Power", DimLight_IsOn[Id]);
}

CHANGE DimLight_Level
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	ProcessCrestronEvent(Id, "LightDimmer", "Level", DimLight_Level[Id]);
}

CHANGE Switch_IsOn
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	ProcessCrestronEvent(Id, "GenericSwitch", "Power", Switch_IsOn[Id]);
}

CHANGE Fan_IsOff
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	ProcessCrestronEvent(Id, "Fan", "Power", !Fan_IsOff[Id]);
}

CHANGE Fan_IsLow
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();

	if (Fan_IsLow[Id])
	{
		ProcessCrestronEvent(Id, "Fan", "Speed", 33);
	}
}

CHANGE Fan_IsMed
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();

	if (Fan_IsMed[Id])
	{
		ProcessCrestronEvent(Id, "Fan", "Speed", 67);
	}
}

CHANGE Fan_IsHigh
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();

	if (Fan_IsHigh[Id])
	{
		ProcessCrestronEvent(Id, "Fan", "Speed", 100);
	}

}

CHANGE Tv_IsOn
{
	INTEGER Id;
	Id = GetLastModifiedArrayIndex();
	ProcessCrestronEvent(Id, "Television", "Power", Tv_IsOn[Id]);
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.

	RegisterEvent(MsgBroker, Request, RequestHandler);
}
